class MainScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.kit1 = MotorKit(address=0x60)
        self.kit2 = MotorKit(address=0x61)
        self.motor_x, self.motor_y, self.motor_z = self.kit1.stepper1, self.kit1.stepper2, self.kit2.stepper1
        self.steps_per_mm = 200 / (2 * 3.14 * 10)
        self.chan = AnalogIn(ADS.ADS1115(board.I2C()), ADS.P0)

        layout = BoxLayout(orientation='vertical', spacing=10, padding=10)
        layout.add_widget(Label(text="ScanProTech", font_size='40sp', color=(1, 0, 0, 1), size_hint=(1, None), height=50))

        content = BoxLayout(orientation='horizontal', spacing=10)
        left = BoxLayout(orientation='vertical', spacing=10, size_hint=(0.6, 1))
        self.image_widget = Image(size_hint=(1, 0.7))
        left.add_widget(self.image_widget)
        left.add_widget(Widget(size_hint=(1, None), height=10))

        self.scanned_image_label = Label(text="Scanning Complete. Heatmap displayed above.", font_size='18sp', size_hint=(1, None), height=30, color=(1, 1, 1, 1))
        left.add_widget(self.scanned_image_label)
        left.add_widget(Widget(size_hint=(1, None), height=10))

        self.ai_feedback_label = Label(text="[AI Feedback]", font_size='16sp', size_hint=(1, None), height=140,
                                       color=(1, 1, 1, 1), halign="left", valign="top")
        self.ai_feedback_label.bind(size=self.ai_feedback_label.setter('text_size'))
        with self.ai_feedback_label.canvas.before:
            Color(0, 0, 0, 1)
            self.feedback_bg = Rectangle(pos=self.ai_feedback_label.pos, size=self.ai_feedback_label.size)
        self.ai_feedback_label.bind(pos=self.update_feedback_rect, size=self.update_feedback_rect)
        left.add_widget(self.ai_feedback_label)

        left.add_widget(Widget(size_hint=(1, None), height=10))
        btn_box = BoxLayout(size_hint=(1, None), height=50, spacing=10)
        self.scan_btn = Button(text="Scan Now")
        self.scan_btn.bind(on_release=self.start_scan)
        btn_box.add_widget(Button(text="Previous Scans"))
        btn_box.add_widget(self.scan_btn)
        left.add_widget(btn_box)

        content.add_widget(left)
        layout.add_widget(content)
        self.add_widget(layout)

    def update_feedback_rect(self, *args):
        self.feedback_bg.pos = self.ai_feedback_label.pos
        self.feedback_bg.size = self.ai_feedback_label.size

    def analyze_image_with_ai(self, path):
        try:
            r = requests.post("http://127.0.0.1:8000/analyze", files={"file": open(path, "rb")})
            return r.json() if r.ok else {"error": "Invalid response"}
        except Exception as e:
            return {"error": str(e)}

    def update_velocity_display(self, x, y):
        print(f"X Velocity: {x:.2f} mm/s, Y Velocity: {y:.2f} mm/s")

    def start_scan(self, *_):
        try:
            sampling = 100.0
            y_val = 10.0
            z_val = 0.0
            move_third_actuator(self.motor_z, z_val)
            reset_axes(self.motor_x, self.motor_y, self.steps_per_mm)
            move_in_zigzag_pattern(self.motor_x, self.motor_y, self.chan, sampling, y_val, self.steps_per_mm, self.update_velocity_display)
            path = generate_heatmap(data_matrix)
            self.image_widget.source = path
            self.image_widget.reload()
            self.image_widget.opacity = 1
            result = self.analyze_image_with_ai(path)
            if "error" in result:
                self.ai_feedback_label.text = f"[AI Error] {result['error']}"
            else:
                heur = result.get("heuristic", {})
                self.ai_feedback_label.text = (
                    "[AI Feedback]:"
                    f"\n - Object: {heur.get('object', 'N/A')}"
                    f"\n - Confidence Score: {heur.get('threat_score', 'N/A')}"
                    f"\n - Sharpness: {heur.get('sharpness', 'N/A')}"
                    f"\n - Feedback: {heur.get('feedback', 'No comment')}"
                )
        except Exception as e:
            self.ai_feedback_label.text = f"Error: {e}"

